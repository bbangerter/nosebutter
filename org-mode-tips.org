* org-mode tips
** weaving
   Add =:noweb yes= header to =org= code blocks to build and nest more complex documents.
** tangling
*** tangle all blocks in org buffer =C-c C-v C-t=
   If you want to tangle only blocks under a specific tree
   1. Open Tree in Indirect Buffer =C-c C-x b=
   2. Tangle blocks the indirect buffer using =C-c C-v C-t=
** Prompt for =:var= variables dynamically in =minibuffer=
#+begin_src elisp
(read-passwd "Password: ")
#+end_src

#+RESULTS:
: myPassword

#+begin_src elisp
(read-string "Username: ")
#+end_src

#+RESULTS:
: myUsername

#+NAME: ex2-rest-sp-curl
#+HEADER: :wrap EXAMPLE
#+HEADER: :results replace output 
#+HEADER: :var password=(read-passwd "Password: ")
#+HEADER: :var username=(read-string "Username: ")
#+begin_src sh
curl --ntlm -u $username:$password -H "Accept: application/json;odata=verbose" "http://sharepoint.example.org/the/path/_api/web/Lists/getbytitle('MyTitle')/items?"
#+end_src
** Caveat: Passing tables with =hline= to code blocks can be confusing.
*** Example 1
**** Table with one =hline= on 2nd row

#+NAME: ex1-table-one-hline
| Column_Header |
|---------------|
| Value 0       |
| Value 1       |
| Value 2       |
| Value 3       |

***** Default behavior

#+NAME: ex1-table-one-hline-default
#+begin_src elisp :var data=ex1-table-one-hline 
  data
#+end_src

#+RESULTS: ex1-table-one-hline-default
| Value 0 |
| Value 1 |
| Value 2 |
| Value 3 |

***** Added =:colnames yes=
#+NAME: ex1-table-one-hline-added-colnames-yes
#+begin_src elisp :var data=ex1-table-one-hline :colnames yes  
  data
#+end_src

#+RESULTS: ex1-table-one-hline-added-colnames-yes
| Column_Header |
|---------------|
| Value 0       |
| Value 1       |
| Value 2       |
| Value 3       |

**** Table with =hline= on 2nd row and last row

#+NAME: ex1-table-two-hline
| Column_Header |
|---------------|
| Value 0       |
| Value 1       |
| Value 2       |
| Value 3       |
|---------------|

***** Default behavior

#+NAME: ex1-table-two-hline-default
#+begin_src elisp :var data=ex1-table-two-hline 
  data
#+end_src

#+RESULTS: ex1-table-two-hline-default
| Column_Header |
| Value 0       |
| Value 1       |
| Value 2       |
| Value 3       |

***** Added =:colnames yes=

#+NAME: ex1-table-two-hline-added-colnames-yes
#+begin_src elisp :var data=ex1-table-two-hline :colnames yes 
  data
#+end_src

#+RESULTS: ex1-table-two-hline-added-colnames-yes
| Column_Header |
|---------------|
| Value 0       |
| Value 1       |
| Value 2       |
| Value 3       |

***** Added =hlines yes=

#+NAME: ex1-table-two-hline-added-hlines-yes
#+begin_src elisp :var data=ex1-table-two-hline :hlines yes  
  data
#+end_src

#+RESULTS: ex1-table-two-hline-added-hlines-yes
| Column_Header |
|---------------|
| Value 0       |
| Value 1       |
| Value 2       |
| Value 3       |
|---------------|

***** Added both =:colnames yes= and =hlines yes=

#+NAME: ex1-table-two-hline-added-both-colnames-hlines-yes
#+begin_src elisp :var data=ex1-table-two-hline :colnames yes :hlines yes  
  data
#+end_src

#+RESULTS: ex1-table-two-hline-added-both-colnames-hlines-yes
| Column_Header |
|---------------|
| Value 0       |
| Value 1       |
| Value 2       |
| Value 3       |
|---------------|

** Troubleshooting
*** Errors
**** =org-element-headline-parser: Variable binding depth exceeds max-specpdl-size=
This is a recursion error. 

***** Example 1 - Named Block inserts itself via =:noweb=
#+BEGIN_EXAMPLE
,#+name: max-specpdl-size-example1
,#+header: :noweb yes  
,#+header: :tangle /tmp/recursion-errors/max-specpdl-size-example1
,#+begin_src sh :eval never 
<<max-specpdl-size-example1>>
,#+end_src

,#+name: max-specpdl-size-example1
,#+begin_src sh :eval never 
echo "Did Copy/Paste and forgot to rename max-specpdl-size-example1 block"
,#+end_src

#+END_EXAMPLE

