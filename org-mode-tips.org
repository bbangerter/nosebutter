* org-mode tips
** weaving
   Add =:noweb yes= header to =org= code blocks to build and nest more complex documents.
** tangling
*** tangle all blocks in org buffer =C-c C-v C-t=
   If you want to tangle only blocks under a specific tree
   1. Open Tree in Indirect Buffer =C-c C-x b=
   2. Tangle blocks the indirect buffer using =C-c C-v C-t=
** Add 2 columns of Hex Numbers and Display
#+BEGIN_SRC org
| 0x10 | 0x0 |  16 | 10 |
| 0x20 | 0x1 |  33 | 21 |
| 0x30 | 0x2 |  50 | 32 |
| 0xf0 | 0xf | 255 | FF |
#+TBLFM: $3='(+ (string-to-number (substring $2 2) 16) (string-to-number (substring $1 2) 16))::$4='(format "%X" (string-to-number $3))
#+END_SRC

** Prompt for =:var= variables dynamically in =minibuffer=
#+begin_src elisp
(read-passwd "Password: ")
#+end_src

#+RESULTS:
: myPassword

#+begin_src elisp
(read-string "Username: ")
#+end_src

#+RESULTS:
: myUsername

#+NAME: ex2-rest-sp-curl
#+HEADER: :wrap EXAMPLE
#+HEADER: :results replace output 
#+HEADER: :var password=(read-passwd "Password: ")
#+HEADER: :var username=(read-string "Username: ")
#+begin_src sh
curl --ntlm -u $username:$password -H "Accept: application/json;odata=verbose" "http://sharepoint.example.org/the/path/_api/web/Lists/getbytitle('MyTitle')/items?"
#+end_src

To update list need to pass `X-RequestDigest: FormDigestValue` to Get FormDigestValue submit `POST` to `/_api/contextinfo` with no data. See example curl command below:

:  curl -v -v -v --ntlm -u $username:$password -H "content-type:application/json;odata=verbose" -H "accept:application/json;odata=verbose" -d "" -X POST "http://$site_hostname/$site_path/_api/contextinfo"

TO create item then pass `X-RequestDigest` as a header

    #+BEGIN_SRC shell :results replace output  :var username=(read-string "Username: ") :var password=(read-passwd "Password: ") :var site_hostname="site.hostname" :var site_path="path/to/site" :var list_guid="ba393f35-6d80-4e8d-b297-3c7145c48874" :var list_item="Added by curl in code block 1"  :var list_type="SP.Data.TestListItem"
    curl -v -v -v --ntlm -u $username:$password -d "{\"Title\":\"$list_tem\",\"__metadata\":{\"type\":\"$list_type\"}}" -H "content-type:application/json;odata=verbose" -H "accept:application/json;odata=verbose" -H "X-RequestDigest: 0xE7199A5918E328B0BBD11677CA7DB56F8A80D65F45B2B8E449BED751A45877F46E4A8D30AC411C05B3C49F564218E37C347C0BFF98D9862FACCC1005EF368AA2,30 Mar 2016 19:17:21 -0000"  -X POST "http://onecorp.zbc.internal/tops/iops/appeng/_api/Web/Lists(guid'$list_guid')/Items"
    #+END_SRC

> Useful Reference: http://stackoverflow.com/questions/3851445/ruby-how-do-i-send-a-json-post-request-using-curb

** Embedding org-mode table data as perl code using a python code block and =:noweb=

This technique will allow you to place the table data into your perl code so that the code is more readable.


#+BEGIN_SRC org

  ,#+NAME: data-table
  | Property-Name | Property-Value |
  |---------------+----------------|
  | P1_STRING1    | P1_VALUE1      |
  | P2_STRING2    | 1234           |

  ,#+NAME: convert-data-to-perl-code
  ,#+BEGIN_SRC python :var data=data-table :results verbatim code replace :session :exports none 
    data
  ,#+END_SRC

  ,#+RESULTS: convert-data-to-perl-code
  ,#+BEGIN_SRC python
  [['P1_STRING1', 'P1_VALUE1'], ['P2_STRING2', 1234]]
  ,#+END_SRC

  ,#+NAME: data-table-perl-code
  ,#+BEGIN_SRC perl :noweb yes :eval never :exports code 
  my @test_data = <<convert-data-to-perl-code()>>;
  ,#+END_SRC
#+END_SRC

#+RESULTS: 
:RESULTS:


#+NAME: data-table
| Property-Name | Property-Value |
|---------------+----------------|
| P1_STRING1    | P1_VALUE1      |
| P2_STRING2    | 1234           |

#+NAME: data-table-perl-code
#+BEGIN_SRC perl
  my @test_data = [['P1_STRING1', 'P1_VALUE1'], ['P2_STRING2', 1234]];
#+END_SRC
:END:


** Caveat: Passing tables with =hline= to code blocks can be confusing.
*** Example 1
**** Table with one =hline= on 2nd row

#+NAME: ex1-table-one-hline
| Column_Header |
|---------------|
| Value 0       |
| Value 1       |
| Value 2       |
| Value 3       |

***** Default behavior

#+NAME: ex1-table-one-hline-default
#+begin_src elisp :var data=ex1-table-one-hline 
  data
#+end_src

#+RESULTS: ex1-table-one-hline-default
| Value 0 |
| Value 1 |
| Value 2 |
| Value 3 |

***** Added =:colnames yes=
#+NAME: ex1-table-one-hline-added-colnames-yes
#+begin_src elisp :var data=ex1-table-one-hline :colnames yes  
  data
#+end_src

#+RESULTS: ex1-table-one-hline-added-colnames-yes
| Column_Header |
|---------------|
| Value 0       |
| Value 1       |
| Value 2       |
| Value 3       |

**** Table with =hline= on 2nd row and last row

#+NAME: ex1-table-two-hline
| Column_Header |
|---------------|
| Value 0       |
| Value 1       |
| Value 2       |
| Value 3       |
|---------------|

***** Default behavior

#+NAME: ex1-table-two-hline-default
#+begin_src elisp :var data=ex1-table-two-hline 
  data
#+end_src

#+RESULTS: ex1-table-two-hline-default
| Column_Header |
| Value 0       |
| Value 1       |
| Value 2       |
| Value 3       |

***** Added =:colnames yes=

#+NAME: ex1-table-two-hline-added-colnames-yes
#+begin_src elisp :var data=ex1-table-two-hline :colnames yes 
  data
#+end_src

#+RESULTS: ex1-table-two-hline-added-colnames-yes
| Column_Header |
|---------------|
| Value 0       |
| Value 1       |
| Value 2       |
| Value 3       |

***** Added =hlines yes=

#+NAME: ex1-table-two-hline-added-hlines-yes
#+begin_src elisp :var data=ex1-table-two-hline :hlines yes  
  data
#+end_src

#+RESULTS: ex1-table-two-hline-added-hlines-yes
| Column_Header |
|---------------|
| Value 0       |
| Value 1       |
| Value 2       |
| Value 3       |
|---------------|

***** Added both =:colnames yes= and =hlines yes=

#+NAME: ex1-table-two-hline-added-both-colnames-hlines-yes
#+begin_src elisp :var data=ex1-table-two-hline :colnames yes :hlines yes  
  data
#+end_src

#+RESULTS: ex1-table-two-hline-added-both-colnames-hlines-yes
| Column_Header |
|---------------|
| Value 0       |
| Value 1       |
| Value 2       |
| Value 3       |
|---------------|

** Troubleshooting
*** Errors
**** =org-element-headline-parser: Variable binding depth exceeds max-specpdl-size=
The =Variable binding depth exceeds max-specpdl-size= error shows your code has recursion issue(s). 

***** Example 1 - Named Block inserts into itself via =:noweb=

Did a Copy & Paste and forgot to rename my code block. Didn't discover the recursion issue until I did =C-c= =C-v= =t= to tangle the script.

#+BEGIN_EXAMPLE
,#+name: max-specpdl-size-example1
,#+header: :noweb yes  
,#+header: :tangle /tmp/recursion-errors/max-specpdl-size-example1
,#+begin_src sh :eval never 
<<max-specpdl-size-example1>>
,#+end_src

,#+name: max-specpdl-size-example1
,#+begin_src sh :eval never 
echo "Did Copy/Paste and forgot to rename max-specpdl-size-example1 block"
,#+end_src

#+END_EXAMPLE

