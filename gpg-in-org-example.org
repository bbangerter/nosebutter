# -*- mode: org -*-

* Setup =gpg= keys

To setup example =gpg= execute the =ruby/gpg-gen-key= code block shown below.

#+NAME: ruby/gpg-gen-key
#+BEGIN_SRC ruby :var batch_filename="my-batch-file" :var homedir="./.gnupg" :var key_type="RSA" :var subkey_type="" :var key_length=4096 :var subkey_length="" :var key_expire_date=0 :var key_real_name="Real Name Goes Here" :var key_email="name@example.org" :var key_comment="Example Key Comment" :var key_info_confirm="--yes" :var key_passphrase="" :results silent
  require 'tempfile'

  make_key_config=<<-END_OF_MKC
  %echo Started Generating PGP Key
  Key-Type: #{key_type}
  Key-Length: #{key_length}
  Subkey-Type: #{(subkey_type.empty?)? key_type : subkey_type}
  Subkey-Length: #{(subkey_length.empty?)? key_length : subkey_length }
  Name-Real: #{key_real_name}
  Name-Comment: #{key_comment}
  Name-Email: #{key_email}
  Expire-Date: #{key_expire_date}
  #{(key_passphrase.empty?)? '%no-protection' : %Q(Passphrase: #{key_passphrase})}
  %commit
  %echo Finished Generating PGP Key
  END_OF_MKC

  temp_file = Tempfile.new(batch_filename, "./")

  begin
    temp_file.write(make_key_config)
    # Rewinding the file is required to this to work. My guess is file buffering is the reason
    temp_file.rewind
    command_output = %x(gpg --yes --homedir #{homedir} --batch --no-tty --gen-key #{temp_file.path})
  ensure
    temp_file.close!
  end
  command_output
#+END_SRC

* Setup =cred= Command

** =cred= Script Code

Tangle the code below to create the =cred= script.

 #+BEGIN_SRC sh :tangle cred :shebang "#!/usr/bin/env bash" :eval never
   #
   set -e
   set -u
   set -o pipefail

   #
   # Variables
   #
   GPG_HOMEDIR=".gnupg"

   #
   # Define Usage
   #
   usage () {
       echo "script usage: $(basename $0) [-h] [-g GPG_HOMEDIR] FILE" >&2
   }


   while getopts 'hg:' OPTION; do
       case "$OPTION" in
	   h)
	       usage
	       exit 0
	       ;;
	   g)
	       GPG_HOMEDIR=${OPTARG:-$GPG_HOMEDIR}
	       ;;2
	   ?)
	   usage
	   exit 1
	   ;;
       esac
   done
   shift "$(($OPTIND -1))"

   #
   # Require FILE Argument
   #

   if [ $# == 0 ]; then
       echo 'ERROR: Missing Required FILE Argument'
       usage
       exit 1
   else
       FILE_PATH=$1

       if [ ! -f $FILE_PATH ]; then
	   echo "ERROR: Bad FILE Argument: $FILE_PATH"
	   usage
	   exit 1
       fi
   fi

   #
   # Check GPG_HOMEDIR Exists
   #

   if [ ! -d $GPG_HOMEDIR ]; then

       echo "WARN: Missing GPG_HOMEDIR: $GPG_HOMEDIR"

       file_dir=$(dirname $FILE_PATH) 

       echo "WARN: Looking for GPG_HOMEDIR under $PWD/$file_dir/$(basename $GPG_HOMEDIR)"
    
       if [ -d "$PWD/$file_dir/$(basename $GPG_HOMEDIR)" ]; then
	   echo "INFO: Found $PWD/$file_dir/$(basename $GPG_HOMEDIR)"
	   echo "WARN: Resetting GPG_HOMEDIR to: $PWD/$file_dir/$(basename $GPG_HOMEDIR)"
	   GPG_HOMEDIR="$PWD/$file_dir/$(basename $GPG_HOMEDIR)"
       else
	   echo "ERROR: Missing GPG_HOMEDIR Directory: $GPG_HOMEDIR"
	   echo "ERROR: GPG_HOMEDIR Directory must exist! Please provide the full path to GPG_HOMEDIR."
	   usage
	   exit 1
       fi  
   fi

   #
   # Validate GPG_HOMEDIR Not Empty
   #
   GPG_FILES_EXPECTED=3
   GPG_FILES_FOUND=0

   for file in $(ls -1 $GPG_HOMEDIR/*.gpg); do
       GPG_FILES_FOUND=$((GPG_FILES_FOUND+1))
   done

   if [ ! $GPG_FILES_FOUND -ge $GPG_FILES_EXPECTED ]; then
       echo "ERROR: Expecting at least $GPG_FILES_EXPECTED .gpg files under $GPG_HOMEDIR: Found: $GPG_FILES_FOUND"
       echo "ERROR: Please provide a path to valid GPG_HOMEDIR"
       usage
       exit 1
   fi

   emacs --load /usr/local/share/emacs/site-lisp/default.el --eval '(xterm-mouse-mode)' $FILE_PATH --eval "(beginning-of-buffer)" --eval '(search-forward "* Credentials")' --eval '(org-narrow-to-subtree)' --eval '(outline-show-all)' --eval "(setq epg-gpg-home-directory \"$GPG_HOMEDIR\")"

 #+END_SRC

** Deploy =cred= as =root=

If desired, deploy the =cred= script to =/usr/local/share/emacs/site-lisp/cred= as user in the systems administrators group.

 #+BEGIN_SRC bash :eval never
  cp cred /usr/local/share/emacs/site-lisp/
  update-alternatives --install /usr/bin/cred cred /usr/local/share/emacs/site-lisp/cred 80
 #+END_SRC

* Setup =default.el= Config File

** =default.el= Code

Tangle the code below to create the =default.el= code.

 #+BEGIN_SRC elisp :tangle default.el :eval never
   (package-initialize)

   (custom-set-variables
    '(org-babel-load-languages
      (quote
       ((emacs-lisp . t)
	(dot . t)
	(perl . t)
	(python . t)
	(ruby . t)
	(org . t)
	(R . t)
	(java . t)
	(js . t)
	(latex . t)
	(css . t)
	(shell . t)
	(awk . t)
	(calc . t)
	(screen . t)
	(sql . t))))
    '(org-babel-noweb-wrap-end "»")
    '(org-babel-noweb-wrap-start "«")
   )

   (require 'org)
   (require 'org-crypt)
 #+END_SRC

** Deploy =default.el= as =root=

If desired, deploy the =default.el= file to =/usr/local/share/emacs/site-lisp/default.el= as user in the systems administrators group.

 #+BEGIN_SRC bash :eval never
   cp default.el /usr/local/share/emacs/site-lisp/
 #+END_SRC

* List Keys

Validate your =gpg= settings by executing the =list-keys= code block below:

#+NAME: list-keys
#+BEGIN_SRC ruby :var homedir="./.gnupg" :exports both
  command_output = %x(gpg --homedir #{homedir} --list-public-keys)
  command_output.split("\n").select{ |c| c.include?("uid")}.map{|r| ['uid',r.gsub(/\s+/," ",).gsub(/^uid /, "")]}
#+END_SRC

#+RESULTS: list-keys
| uid | Real Name Goes Here (Example Key Comment) <name@example.org>    |
| uid | Real Name2 Goes Here (Example Key Comment2) <name2@example.org> |

* Credentials

1. Update the =CRYPTKEY= property under the =Credentials Table= section to match the =uid= value of your key.
2. Save this file.
3. Close this file.
4. Open the file, using ~cred gpg-in-org-example.org~ 
5. Add, delete or update the rows in the =example-credentials-table= table below.
6. Click the =decrypt=, =encrypt=, =exit only=, and =save & quit= links as appropriate.
7. If prompted, choose /yes/ or /no/ as appropriate.

# [[elisp:(org-decrypt-entries)][decrypt]] # [[elisp:(org-encrypt-entries)][encrypt]] # [[elisp:(kill-emacs)][exit only]] # [[elisp:(save-buffers-kill-terminal 't)][save & quit]] #

** Credentials Table                                                 :crypt:
:PROPERTIES:
:CRYPTKEY: Real Name Goes Here (Example Key Comment) <name@example.org>
:END:

#+NAME: example-credentials-table
| Deploy-Environment | Database | User  | Password         | Notes |
|--------------------+----------+-------+------------------+-------|
| example            |  mydb    | userA |  user-a-password |       |

* Code Examples Tested Version

| gpg (GnuPG) 2.0.22                                                                        |
| libgcrypt 1.5.3                                                                           |
| GNU Emacs 26.2 (build 1, x86_64-pc-linux-gnu, X toolkit, Xaw3d scroll bars) of 2019-10-11 |
| Org mode version 9.1                                                                      |
