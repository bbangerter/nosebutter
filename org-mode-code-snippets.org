* Code Snippets
** =org-element-interpret-data=

  [[http://emacs.stackexchange.com/questions/15152/most-common-data-structure-is-a-list][copied from emacs.stackexchange question]]
  
#+BEGIN_SRC emacs-lisp :results raw
(org-element-interpret-data
 '(headline (:title "One headline" :level 3)
            (property-drawer nil ((node-property (:key "property1" :value "value1"))
                                  (node-property (:key "property2" :value "value2"))))
            (#("Some much longer content."))))
#+END_SRC

#+RESULTS:
*** One headline
:PROPERTIES:
:property1: value1
:property2: value2
:END:
Some much longer content.

** =org-sbe=
*** =ob-table.el= example from Commentary Section - *Fixed* - *Works*

   #+begin_src emacs-lisp :results silent
   (defun fibbd (n) (if (< n 2) 1 (+ (fibbd (- n 1)) (fibbd (- n 2)))))
   #+end_src


   #+name: fibbd
   #+begin_src emacs-lisp :var n=2 :results value
   (fibbd n)
   #+end_src


   | original | fibbd |
   |----------+-------|
   |        0 |     1 |
   |        1 |     1 |
   |        2 |     2 |
   |        3 |     3 |
   |        4 |     5 |
   |        5 |     8 |
   |        6 |    13 |
   |        7 |    21 |
   |        8 |    34 |
   |        9 |    55 |
   #+TBLFM: $2='(org-sbe fibbd (n $1))

Note: Updated ='fibbd= to =fibbd= in example which *fixed #ERROR* 

***  force interpretation of a cell's value as a string 

#+name: get-ip-address
#+header: :var name=""
#+begin_src ruby  :results value 
  require 'resolv' 

  ip_address = ""
  ip_address = Resolv.getaddress(name) rescue "" unless name.empty?
  ip_address
#+end_src

#+RESULTS: get-ip-address

    
| Hostname      |   IP-Address |
|---------------+--------------|
| www.apple.com | 23.204.86.43 |
#+TBLFM: $2='(org-sbe get-ip-address (name $$1))



** org-mode table functions =TBLFM=
*** Example using =remote= to create clickable links from data in another table   

#+name: example-hosts-table
| hostname |  ip address |
|----------+-------------|
| HostA    | 192.168.0.1 |
| HostB    | 192.168.0.2 |
| HostC    | 192.168.0.3 |
| HostD    | 192.168.0.4 |
| HostE    | 192.168.0.5 |
| HostF    | 192.168.0.6 |

#+name: example-scp-urls-table
| *Type* | *URL*                               |
|--------+-------------------------------------|
| scp    | file:/scp:username@192.168.0.1:/dir |
| scp    | file:/scp:username@192.168.0.2:/dir |
| scp    | file:/scp:username@192.168.0.3:/dir |
| scp    | file:/scp:username@192.168.0.4:/dir |
| scp    | file:/scp:username@192.168.0.5:/dir |
| scp    | file:/scp:username@192.168.0.6:/dir |
#+TBLFM: $1=(scp)::$2='(concat "file:/" $1 ":username@" remote(example-hosts-table, @@#$2) ":" "/dir")

#+name: example-xterm-urls-table
| *Type* | *URL*                                                                         |
|--------+-------------------------------------------------------------------------------|
| xterm  | [[shell:xterm -name 'username@192.168.0.1' -e ssh -X username@192.168.0.1 &]] |
| xterm  | [[shell:xterm -name 'username@192.168.0.2' -e ssh -X username@192.168.0.2 &]] |
| xterm  | [[shell:xterm -name 'username@192.168.0.3' -e ssh -X username@192.168.0.3 &]] |
| xterm  | [[shell:xterm -name 'username@192.168.0.4' -e ssh -X username@192.168.0.4 &]] |
| xterm  | [[shell:xterm -name 'username@192.168.0.5' -e ssh -X username@192.168.0.5 &]] |
| xterm  | [[shell:xterm -name 'username@192.168.0.6' -e ssh -X username@192.168.0.6 &]] |
#+TBLFM: $1=(xterm)::$2='(concat "[[" "shell:" $1 " -name 'username@" remote(example-hosts-table, @@#$2) "'" " -e ssh -X username@" remote(example-hosts-table, @@#$2) " &" "]]")

** Code blocks inside Drawers

#+NAME: example-configs-table
| *Configuration Name*   | *Configuration Value*        |
|------------------------+------------------------------|
| example-named-comment1 | example-named-comment1-value |
| example-named-comment2 | example-named-comment2-value |
| example-named-comment3 | example-named-comment3-value |
| example-named-comment4 | example-named-comment4-value |
| example-named-comment5 | example-named-comment5-value |

#+NAME: example-make-named-comments
#+HEADER: :var data=example-configs-table()
#+HEADER: :results silent output 
#+begin_src ruby
  for d in data
    puts "#+NAME: #{d[0]}\n#+BEGIN_COMMENT\n#{d[1]}\n#+END_COMMENT\n\n#+CALL: #{d[0]}()\n\n"
  end
#+end_src

#+NAME: example-named-comments
#+CALL: example-make-named-comments() :results drawer value 

#+RESULTS: example-named-comments
:RESULTS:
#+NAME: example-named-comment1
#+BEGIN_COMMENT
example-named-comment1-value
#+END_COMMENT

#+CALL: example-named-comment1()

#+NAME: example-named-comment2
#+BEGIN_COMMENT
example-named-comment2-value
#+END_COMMENT

#+CALL: example-named-comment2()

#+NAME: example-named-comment3
#+BEGIN_COMMENT
example-named-comment3-value
#+END_COMMENT

#+CALL: example-named-comment3()

#+NAME: example-named-comment4
#+BEGIN_COMMENT
example-named-comment4-value
#+END_COMMENT

#+CALL: example-named-comment4()

#+NAME: example-named-comment5
#+BEGIN_COMMENT
example-named-comment5-value
#+END_COMMENT

#+CALL: example-named-comment5()

:END:

** Tangling formatted org-tables into files or source code

*** Call table with new name and have results wrapped as org code block

#+NAME: example-table-into-org-block
#+CALL: example-configs-table() :cache yes :results table org replace 

#+RESULTS[e00168416978c3284ca41781e32a0e0f475c4445]: example-table-into-org-block
#+BEGIN_SRC org
| *Configuration Name*   | *Configuration Value*        |
|------------------------+------------------------------|
| example-named-comment1 | example-named-comment1-value |
| example-named-comment2 | example-named-comment2-value |
| example-named-comment3 | example-named-comment3-value |
| example-named-comment4 | example-named-comment4-value |
| example-named-comment5 | example-named-comment5-value |
| example-named-comment6 | example-named-comment6-value |
#+END_SRC

*** Then Add new name above results block 

#+NAME: example-table-into-org-block1
#+CALL: example-configs-table() :cache yes :results table org replace 

#+NAME: example-table-into-org-block1a
#+RESULTS[e00168416978c3284ca41781e32a0e0f475c4445]: example-table-into-org-block1
#+BEGIN_SRC org
| *Configuration Name*   | *Configuration Value*        |
|------------------------+------------------------------|
| example-named-comment1 | example-named-comment1-value |
| example-named-comment2 | example-named-comment2-value |
| example-named-comment3 | example-named-comment3-value |
| example-named-comment4 | example-named-comment4-value |
| example-named-comment5 | example-named-comment5-value |
| example-named-comment6 | example-named-comment6-value |
#+END_SRC



*** Then use =noweb= of renamed results block inside code or file 

#+begin_src sh :eval never :noweb tangle :tangle example-tangle-formatted-org-tables 
  #
  # <<example-table-into-org-block1a()>>
  #

#+end_src

*Note:* Renaming trick also works when your having trouble passing =#+RESULTS:= to another =src block=.


* Link to Code Block within Org or PDF

#+BEGIN_LaTeX
\hypertarget{some-source-code}{} 
#+END_LaTeX
#+NAME: some-source-code
#+BEGIN_SRC python :eval never 
  for i in 1:10:
      print i
#+END_SRC

* Method 1 for Org File

[[file:::some-source-code][some-source-code]]

* Method 2 for Org File

[[file:::/#\+name: +some-source-code/][regex to some-source-code]]

* Method 3 for PDF

#+BEGIN_SRC latex
  See \hyperlink{some-source-code}{some-source-code}.
#+END_SRC


* COMMENT Improve this example for assoc-string


#+BEGIN_SRC elisp :var hostname="yyxxxxx" :results value 
(setq data-center '((XX . IIII) (YY . HHHH)))
;(assoc (upcase (substring hostname 0 2)) data-center)
;(setq s 'XX)
(setq s (upcase (substring hostname 0 2)))
;(let ((s 1)) s) ; returns 1
;(let ((s 'XX)) s) ; returns XX
;(let ((s (upcase (substring hostname 0 2)))) s) ; returns XX or YY
;(let ((s (upcase (substring hostname 0 2)))) (cdr (assoc 'XX data-center))) ; returns IIII
;(let ((s (upcase (substring hostname 0 2)))) s) ; returns s value

;(setq x (let ((s (upcase (substring hostname 0 2)))) s)) ; returns s into x
;x

;(cdr (assoc 'XX data-center))
;(cdr (assoc s data-center))
;(cdr (assoc s data-center))
;(assoc s data-center)
;`(assoc ,s data-center) ; Interesting!
;`,s ; Very Interesting!

;(assoc-string `,s data-center) ; Works!!!
(cdr (assoc-string `,s data-center)) ; Works!!!
;s
#+END_SRC

#+RESULTS:
: HHHH


#+BEGIN_SRC elisp :var hostname="utxxxx" :results value 
(setq my-height (upcase (substring hostname 0 2)))
(setq dfl
      `((auto-lower . nil)
        (auto-raise . nil)
        (height . ,my-height)
        (width . 80)
        (top . 1)
        (left . 1)))
(assoc 'height dfl)
#+END_SRC

#+RESULTS:
: (height . UT)

# This works now!!

#+NAME: data-center?
#+HEADER: :var hostname="xxnnn123" 
#+HEADER: :var dc-list='((XX . IIII) (YY . HHHH))
#+BEGIN_SRC elisp :results value
  (setq s (upcase (substring hostname 0 2)))
  (cdr (assoc-string `,s dc-list)) 
#+END_SRC

#+RESULTS: data-center?
: IIII


* Displaying Code and Results side-by-side in Github
#+NAME: my-code
#+BEGIN_SRC elisp :exports none 
(+ 1 1)
#+END_SRC

#+NAME: my-other-code
#+BEGIN_SRC elisp :exports none 
(/ 4 (* 2 2))
#+END_SRC


#+BEGIN_SRC org :results drawer replace :noweb yes :exports results 

  ,#+NAME: my-code-with-answer
  ,#+BEGIN_SRC elisp  :exports code 
  <<my-code>> ;=> <<my-code()>>
  <<my-other-code>> ;=> <<my-other-code()>>
  ,#+END_SRC


#+END_SRC

#+RESULTS:
:RESULTS:

#+NAME: my-code-with-answer
#+BEGIN_SRC elisp  :exports code 
(+ 1 1) ;=> 2
(/ 4 (* 2 2)) ;=> 1
#+END_SRC

:END:

